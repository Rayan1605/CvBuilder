@import url('https://fonts.googleapis.com/css2?family=Manrope:wght@200;300;400;500;600;700;800&family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap');
  /*  :root selector matches the document's root element. */
:root {
--clr-blue: #1E90FF;  /* --clr-blue refers to a custom CSS variable or a
custom property that is defined by the developer.
It is not a predefined or standard CSS property.
 The naming convention used here is that --clr-blue is intended to represent a
 specific shade of blue color.
*/
    --clr-blue-mid: #1170CD;
    --clr-blue-dark: #1A1C6A;
    --clr-white: #fff;
    --clr-bright: #EFF2F9;
    --clr-dark: #1e2532;
    --clr-black: #000;
    --clr-grey: #656e83;
    --clr-green: #084C41;
    /* is another example of a custom CSS variable or custom property.*/
    --font-poppins: 'Poppins', sans-serif;
    --font-manrope: 'Manrope', sans-serif;;
    /* --transition variable is like a special instruction that you give to the box, telling it how it should change when something happens.

For example, let's say you define --transition: all 300ms ease-in-out;.
 It means that when an event triggers the transition (like hovering over the box),
 all properties of the box (like color, size, or position) will change over a period of
 300 milliseconds (0.3 seconds). The transition will start slowly,
 gradually speeding up, and then slow down again before reaching the final state.
    */
    --transition: all 300ms ease-in-out;
}

*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}
html{
    font-size: 10px;
}
body{
    font-size: 1.6rem; /* rem is a special ruler that adjusts based on the size of the letters on a webpage. It helps measure lengths and sizes in a way that stays proportional even if the text size changes. It's like a flexible ruler that ensures things look good no matter how big or small the text is.*/
    font-family: var(--font-poppins);
    /* By using the var() function, you can retrieve the value of a
    custom variable and apply it to the font-family property.
    In this case, the --font-poppins variable is expected to hold a font family name,
    such as 'Poppins', which refers to a specific font type. */
}
button{
    border: none;
    background-color: transparent;
    outline: 0;
    cursor: pointer;
    font-family: inherit;
}

img{
    width: 100%;
    display: block;
}

a{
    text-decoration: none;
}

/* fonts */
.font-poppins{font-family: var(--font-poppins);}
.font-manrope{font-family: var(--font-manrope);}

/* text colors */
.text-blue{color: var(--clr-blue);}
.text-blue-mid{color: var(--clr-blue-mid);}
.text-blue-dark{color: var(--clr-blue-dark);}
.text-bright{color: var(--clr-bright);}
.text-dark{color: var(--clr-dark);}
.text-grey{color: var(--clr-grey);}
.text-white{color: var(--clr-white);}

/* backgrounds */
.bg-blue{background-color: var(--clr-blue);}
.bg-blue-mid{background-color: var(--clr-blue-mid);}
.bg-blue-dark{background-color: var(--clr-blue-dark);}
.bg-bright{background-color: var(--clr-bright);}
.bg-dark{background-color: var(--clr-dark);}
.bg-grey{background-color: var(--clr-grey);}
.bg-white{background-color: var(--clr-white);}
.bg-black{background-color: var(--clr-black);}
.bg-green{background-color: var(--clr-green);}

.text-center{ text-align: center;}
.text-left{text-align: left;}
.text-right{text-align: right;}
.text-uppercase{text-transform: uppercase;}
.text-lowercase{text-transform: lowercase;}
.text-capitalize{text-transform: capitalize;}
.text{
    color: var(--clr-dark);
    opacity: 0.9;
    margin: 2rem 0;
    line-height: 1.6;
}

.fw-2{font-weight: 200;}
.fw-3{font-weight: 300;}
.fw-4{font-weight: 400;}
.fw-5{font-weight: 500;}
.fw-6{font-weight: 600;}
.fw-7{font-weight: 700;}
.fw-8{font-weight: 800;}

.fs-13{font-size: 13px;}
.fs-14{font-size: 14px;}
.fs-15{font-size: 15px;}
.fs-16{font-size: 16px;}
.fs-17{font-size: 17px;}
.fs-18{font-size: 18px;}
.fs-19{font-size: 19px;}
.fs-20{font-size: 20px;}
.fs-21{font-size: 21px;}
.fs-22{font-size: 22px;}
.fs-23{font-size: 23px;}
.fs-24{font-size: 24px;}
.fs-25{font-size: 25px;}

.ls-1{letter-spacing: 1px;}
.ls-2{letter-spacing: 2px;}

.container{
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1.6rem;
}

.container{
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1.6rem;
}
/* bars button */
.bars{
    display: flex;
    flex-direction: column;
    justify-content: space-between; /* https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content*/
    height: 16.5px;
    width: 25px;
}
.bars .bar{
    width: 100%;
    height: 2px;
    background-color: var(--clr-blue);
    transition: var(--transition);
}

.bars:hover .bar{
    background-color: var(--clr-dark); /* The var() function provides a way to store and
    reuse values throughout your CSS code. By defining variables at the root level (:root),*/
}
/* buttons */
.btn{
    font-size: 14.5px;
    font-weight: 600;
    padding: 1.4rem 1.6rem;
    border-radius: 4px;
    display: inline-block;
}
.btn-primary{
    background-color: var(--clr-blue);
    color: var(--clr-white);
    border: 1px solid var(--clr-blue);
    transition: var(--transition);
}

.btn-primary:hover{
    background-color: transparent;
    color: var(--clr-dark);
    border-color: var(--clr-grey);
}

.btn-secondary{
    background-color: transparent;
    color: var(--clr-dark);
    border: 1px solid var(--clr-grey);
    transition: var(--transition);
}

.btn-secondary:hover{
    background-color: var(--clr-blue);
    color: var(--clr-white);
    border-color: var(--clr-blue);
}

.btn-group button:first-child, .btn-group a:first-child{
    margin-right: 1rem!important;
}
.navbar{
    height: 80px;
    display: flex;
    align-items: center;
    box-shadow: rgb(0, 0, 0, 0.08) 0 3px 8px;
    /* rgb is a function used to define a color using the RGB color model.
     The RGB color model represents colors by specifying the intensity of red, green,
     and blue components.

 represents the color of the box shadow. In this case, it is an RGB color with values 0, 0, 0 representing black, and the fourth value 0.08
 represents the opacity of the shadow, where 1 is fully opaque and 0 is fully transparent. In this case, the shadow is slightly transparent.

0px 3px 8px specifies the horizontal offset, vertical offset, and blur radius of the box shadow, respectively.

0px indicates there is no horizontal offset, meaning the shadow is directly below the element.
3px represents a vertical offset of 3 pixels, pushing the shadow slightly downwards.
8px is the blur radius of the shadow, making it appear softer and more diffused.


      */
}
.navbar .container{
    width: 100%;
}

.navbar-brand{
    display: flex;
    align-items: center;
    justify-content: flex-start;
    font-size: 1.8rem;
}
.navbar-brand-text{
    color: var(--clr-dark);
    font-weight: 600;
}
.navbar-brand-text span{
    color: var(--clr-blue);
}
.navbar-brand-icon{
    width: 25px;
    margin-right: 6px;
    opacity: 0.8; /* opacity is a property that controls the transparency or
    opacity of an element and its contents.
    It specifies the degree to which the element is see-through or opaque.*/
}
.brand-and-toggler{
    display: flex;
    align-items: center;
    justify-content: space-between;
}
.header{
    min-height: calc(100vh - 80px);
 /* min-height: calc(100vh - 80px); is a property-value pair that sets the minimum height
  of an element to a calculated value.

Let's break it down:

min-height is a CSS property used to specify the minimum height that an element should
 have. It ensures that the element will be at least as tall as the specified value.
calc() is a CSS function that allows you to perform calculations to determine a value.
 In this case, it is used to calculate the desired height.
100vh refers to 100% of the viewport height. The viewport height represents the height
of the browser window.
- 80px subtracts 80px from the viewport height.
*/
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
}
.header-content{
    max-width: 740px;
    margin-right: auto;
    margin-left: auto;
}
.header-content img{
    max-width: 760px;
    border-top-right-radius: 8px;
    border-top-left-radius: 8px;
    margin-top: 3.2rem;
    margin-bottom: 2.5rem;
}
.lg-title{
    margin: 1.4rem 0;
    font-size: 37px;
    line-height: 1.4;
    color: var(--clr-dark);
}
.header-content p{
    margin-bottom: 2.6rem;
    line-height: 1.6;
}
/* section one */
.section-one{
    padding: 64px 0;
    min-height: 80vh;
    display: flex;
    align-items: center;

}
.section-one-l img{
    max-width: 545px;
    margin-right: auto;
    margin-left: auto;
    margin-bottom: 1.2rem;
}
.section-one-r{
    margin-top: 4rem;
}

.section-one .btn-group{
    margin-top: 2rem;
}
.section-one-r{
    max-width: 545px;
    margin-right: auto;
    margin-left: auto;
}
.section-one-r .btn-group{
    margin-top: 3rem;
}
/* section two */
.section-two{
    padding: 64px 0;
    margin-top: 1.2rem;
}
.section-two .section-items{
    display: flex;
    gap: 2rem;
}

.section-two .section-item{
    max-width: 350px;
    text-align: center;
    margin-right: auto;
    margin-left: auto;
}
.section-two .section-item-icon{
    margin: 1rem 0;
}
.section-two .section-item-icon img{
    width: 80px;
    margin-right: auto;
    margin-left: auto;
}
.section-two .section-item-title{
    color: var(--clr-blue-dark);
    font-size: 1.8rem;
    font-weight: 600;
}
.section-two .text{
    margin: 0.9rem 0;
}

/* footer */

.footer{
    padding: 3rem 0;
}

.footer-content p {
    color: var(--clr-grey);
}
.footer-content p span {
    color: var(--clr-white);
}
@media screen and (min-width: 992px) {
    .section-one-content {
        display: grid;
        column-gap: 3rem;
        /* Imagine you have a grid with multiple columns, and you want to create some
        space or a gap between each column.

In this case, column-gap: 3rem; is like telling the computer,
 "Hey, I want to have a gap of 3 rem between each column in my grid.*/
        grid-template-columns: repeat(2, 1fr);
        /* Imagine you have a grid where you want to put things in two columns.
         You want both columns to be the same size and take up an equal amount of space.

So, grid-template-columns: repeat(2, 1fr); is like telling the computer,
"Hey, I want two columns in my grid, and I want both columns to be the same size."

The repeat() part means you're going to repeat something a certain number of times.
In this case, you want to repeat the column size pattern twice.

The 1fr part is like saying, "Make each column take up one part of the available space."
 It's like dividing the space into two equal parts.

By using grid-template-columns: repeat(2, 1fr);, you're telling the computer to create
a grid with two columns that are the same size and take up an equal amount of space.
This helps in organizing and arranging things in a neat way on a webpage,
just like how you would divide a paper into two equal parts to draw or write in each
section.
*/
    }
    .section-one-r{
        text-align: left;
    }
    .section-two .section-items{
        grid-template-columns: repeat(3, 1fr);
        /* Imagine you have a special box, and you want to divide it into three equal parts.

The grid-template-columns: repeat(3, 1fr); is like telling a magic fairy to
split that box into three columns, and each column will be the same size,
just like how you divide a cake into three equal pieces so everyone gets a fair share!

The grid-template-columns part is just saying that we are going to
 decide how the columns inside the box should look.

The repeat() part means we want to repeat something a few times,
and in this case, we want to repeat the size of the columns three times.

And finally, the 1fr part is like saying, "Make each column the same
size and take up one part of the available space." It's like making sure
 each piece of cake is equally delicious!

So, with grid-template-columns: repeat(3, 1fr);, you're telling the magic
 fairy to create a special box with three columns that are all the same size.
  This helps you organize things neatly inside the box, just like how you arrange
   toys in three neat rows so you can see them all and play with each one!
*/
    }
    .section-two .section-item{
        text-align: left;
    }
    .section-two .section-item-icon img{
        margin-left: 0;
    }
}

#about-sc{
    padding: 64px 0;
}
.cv-form-row-title{
    background-color: var(--clr-dark);
    padding: 0.8rem 1.6rem;
    margin-bottom: 2rem;
}

.cv-form-row-title h3{
    color: var(--clr-white);
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 1.5px;
    font-size: 1.7rem;
}
.cv-form-blk{
    margin: 3rem 0;
}
.cv-form-row{
    padding: 3rem 2rem 0 2rem;
    border: 1px solid rgba(0, 0, 0, 0.08);
    margin-bottom: 1rem;
    position: relative;
}
textarea{
    resize: none;
}
.form-elem{
    margin-bottom: 3rem;
    position: relative;
}
.form-label{
    display: block;
    font-weight: 600;
    font-size: 14px;
    color: var(--clr-dark);
    margin-bottom: 0.5rem;
}
.form-control{
    border: 1px solid rgba(0, 0, 0, 0.1);
    font-size: 14px;
    padding: 0.8rem 1.6rem;
    font-family: inherit;
    width: 100%;
    outline: 0;
    transition: var(--transition);
}

.form-control:focus{
    border-color: rgba(0, 0, 0, 0.3);
}
.form-text{
    color: #ca0b00;
    font-size: 12px;
    position: absolute;
    letter-spacing: 0.5px;
    top: calc(100% + 2px);
    left: 0;
    width: 100%;
}

.cols-3, .cols-2{
    display: grid;
}
/* This is for the button*/
.repeater-add-btn{
    width: 25px;
    height: 25px;
    background-color: var(--clr-blue-mid);
    font-size: 1.6rem;
    color: var(--clr-white);
    margin: 1rem 0;
}
.repeater-remove-btn{
    position: absolute;
    top: 10px;
    right: 10px;
    z-index: 999;
    width: 25px;
    height: 25px;
    border-radius: 50%;
    background-color: #ca0b00;
    color: var(--clr-white);
    font-size: 1.6rem;
}
/* preview section */
.preview-cnt{
    border-radius: 5px;
    display: grid;
    grid-template-columns: 32% auto;
    box-shadow: rgba(149, 157, 165,0.2) 0px 8px 24px;
    overflow: hidden;
}
.preview-cnt-l{
    padding: 3rem 3rem 2rem 3rem;
}
.preview-cnt-r{
    padding: 3rem 3rem 3rem 4rem;
}
.preview-cnt-l .preview-blk:nth-child(1){
    text-align: center;
}

.preview-image{
    width: 120px;
    height: 120px;
    border-radius: 50%;
    overflow: hidden;
    margin-right: auto;
    margin-left: auto;
}
.preview-image img{
    width: 100%;
    height: 100%;
    object-fit: cover;
}
.preview-item-name{
    font-size: 2.4rem;
    font-weight: 600;
    margin: 1.8rem 0;
    position: relative;
}
.preview-item-name::after{
    position: absolute;
    content: "";
    bottom: -10px;
    width: 50px;
    height: 1.5px;
    background-color: rgba(255, 255, 255, 0.5);
    left: 50%;
    transform: translateX(-50%);
}
.preview-blk{
    padding: 1rem 0;
    margin-bottom: 1rem;
}
.preview-blk-title h3{
    text-transform: uppercase;
    letter-spacing: 0.5px;
    border-bottom: 0.5px solid rgba(0, 0, 0, 0.08);
    padding-bottom: 0.5rem;
}
.preview-blk-title{
    margin-bottom: 1rem;
}
.preview-blk-list .preview-item{
    font-size: 1.5rem;
    margin-bottom: 0.2rem;
    opacity: 0.95;
}
.preview-cnt-r .preview-blk-title{
    color: var(--clr-dark);
}
.preview-cnt-r .preview-blk-list .preview-item{
    margin-top: 1.8rem;
}

.achievements-items.preview-blk-list .preview-item span:first-child,
.educations-items.preview-blk-list .preview-item span:first-child,
.experiences-items.preview-blk-list .preview-item span:first-child{
    display: block;
    font-weight: 600;
    margin-bottom: 1rem;
    background-color: rgba(0, 0, 0, 0.03);
}

.educations-items.preview-blk-list .preview-item span:nth-child(2),
.experiences-items.preview-blk-list .preview-item span:nth-child(2){
    font-weight: 600;
    margin-right: 1rem;
}

.educations-items.preview-blk-list .preview-item span:nth-child(3),
.experiences-items.preview-blk-list .preview-item span:nth-child(3){
    font-style: italic;
    margin-right: 1rem;
}

.educations-items.preview-blk-list .preview-item span:nth-child(4),
.educations-items.preview-blk-list .preview-item span:nth-child(5),
.experiences-items.preview-blk-list .preview-item span:nth-child(4),
.experiences-items.preview-blk-list .preview-item span:nth-child(5){
    margin-right: 1rem;
    background-color: var(--clr-green);
    color: var(--clr-white);
    padding: 0 1rem;
    border-radius: 0.6rem;
}

.educations-items.preview-blk-list .preview-item span:nth-child(6),
.experiences-items.preview-blk-list .preview-item span:nth-child(6){
    font-size: 13.5px;
    display: block;
    opacity: 0.8;
    margin-top: 1rem;
}
.projects-items.preview-blk-list .preview-item span{
    display: block;
}
@media screen and (min-width: 768px){
    .cols-3{
        grid-template-columns: repeat(3, 1fr);
        column-gap: 2rem;
    }
    .cols-2{
        grid-template-columns: repeat(2, 1fr);
        column-gap: 2rem;
    }
}

@media screen and (min-width: 992px){
    .cv-form-row{
        padding: 3rem 3rem 0rem 3rem;
    }
    .cols-3{
        grid-template-columns: repeat(3, 1fr);
    }
}

.print-btn-sc{
    margin: 2rem 0 6rem 0;
}

/* print section */
@media print{
    body *{
        visibility: hidden;
    }

    .non_print_area{
        display: none;
    }

    .print_area, .print_area *{
        visibility: visible;
    }

    .print_area{
        width: 100%;
        position: absolute;
        left: 0;
        top: 0;
        overflow: hidden;
    }
}
















